// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package graph_mining.in_memory;

// Shared-memory implementation of parallel label propagation. The initial label
// of each node is its own id. In each round, each node that had a neighbor
// update its label on the previous round recomputes it label as the most
// frequent label among its neighborhood. Edge weights are summed up to compute
// the max-frequency label. Note that the order that nodes are updated will
// depend on the options set in the config below.
message LabelPropagationConfig {
  // The maximum number of rounds to run.
  optional int32 max_rounds = 1 [default = 100];

  // Color the graph using greedy graph coloring, and then process each color
  // set in parallel in sub-rounds within a round. Enabling this flag
  // ensures that the algorithm is deterministic.
  // TODO: benchmark the slowdown incurred by using coloring and
  // check if we should set this option to true by default.
  optional bool use_graph_coloring = 2;
}
